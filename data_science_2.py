import streamlit as st
import pandas as pd
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import json

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets —á–µ—Ä–µ–∑ —Å–µ–∫—Ä–µ—Ç—ã
SCOPE = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]

@st.cache_resource
def connect_to_gsheet():
    service_account_info = st.secrets["google_service_account"]
    credentials = ServiceAccountCredentials.from_json_keyfile_dict(service_account_info, SCOPE)
    client = gspread.authorize(credentials)
    sheet = client.open("reviews").sheet1
    return sheet

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data(show_spinner=False)
def load_data():
    try:
        companies_df = pd.read_csv('companies.csv')
        sheet = connect_to_gsheet()
        data = sheet.get_all_records()
        reviews_df = pd.DataFrame(data)
        return companies_df, reviews_df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None, None

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–∞
def save_review_row(row_data):
    sheet = connect_to_gsheet()
    sheet.append_row([
        row_data.get("company", ""),
        row_data.get("question_text", ""),
        row_data.get("answer_text", ""),
        row_data.get("user_name", ""),
        row_data.get("worked", ""),
        row_data.get("review_text", ""),
        row_data.get("work_conditions", ""),
        row_data.get("culture", ""),
        row_data.get("management", "")
    ])

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
def save_answer_to_question(question_text, answer):
    sheet = connect_to_gsheet()
    cell = sheet.find(question_text)
    if cell:
        sheet.update_cell(cell.row, 3, answer)  # 3 = column C (answer_text)

# –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
def update_average_rating(company_name):
    company_reviews = st.session_state.reviews_df[st.session_state.reviews_df['company'] == company_name]
    if len(company_reviews) > 0:
        try:
            avg_work_conditions = company_reviews['work_conditions'].replace('', pd.NA).dropna().astype(float).mean()
            avg_culture = company_reviews['culture'].replace('', pd.NA).dropna().astype(float).mean()
            avg_management = company_reviews['management'].replace('', pd.NA).dropna().astype(float).mean()
            avg_overall = (avg_work_conditions + avg_culture + avg_management) / 3
            return avg_work_conditions, avg_culture, avg_management, avg_overall
        except Exception as e:
            st.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥–∞: {e}")
            return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"
    else:
        return "–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤", "–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤", "–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤", "–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤"

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –±–µ–∑ –æ—Ç–≤–µ—Ç–æ–≤ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∏—Ç—å

def display_questions_and_answers(company_name, worked):
    company_reviews = st.session_state.reviews_df[st.session_state.reviews_df['company'] == company_name]
    unanswered = company_reviews[company_reviews['answer_text'].isna() | (company_reviews['answer_text'] == '')]
    if unanswered.empty:
        st.write("–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –±–µ–∑ –æ—Ç–≤–µ—Ç–æ–≤.")
    else:
        st.write("–í–æ–ø—Ä–æ—Å—ã –±–µ–∑ –æ—Ç–≤–µ—Ç–æ–≤:")
        for idx, row in unanswered.iterrows():
            st.write(f"–í–æ–ø—Ä–æ—Å:  {row['question_text']}")
            if worked == '–î–∞':
                answer = st.text_area("–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å:", key=f"answer_{idx}")
                if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç", key=f"submit_answer_{idx}"):
                    save_answer_to_question(row['question_text'], answer)
                    st.success("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞.")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤

def display_employee_reviews(company_name):
    reviews = st.session_state.reviews_df
    filtered = reviews[(reviews['company'] == company_name) & (reviews['worked'] == '–î–∞') & (reviews['review_text'] != '')]
    if filtered.empty:
        st.write("–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –æ –∫–æ–º–ø–∞–Ω–∏–∏.")
    else:
        st.write("–û—Ç–∑—ã–≤—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:")
        for _, row in filtered.iterrows():
            st.write(f"–û—Ç–∑—ã–≤: {row['review_text']}")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤

def display_answered_questions(company_name):
    company_reviews = st.session_state.reviews_df[st.session_state.reviews_df['company'] == company_name]
    answered = company_reviews[company_reviews['answer_text'].notna() & (company_reviews['answer_text'] != '')]
    if answered.empty:
        st.write("–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
    else:
        st.write("–û—Ç–≤–µ—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:")
        for _, row in answered.iterrows():
            st.markdown(f"–û—Ç–≤–µ—Ç:  _{row['question_text']}_")
            st.write(f"üí¨ {row['answer_text']}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è

def page_rate_company():
    st.title("–û—Ü–µ–Ω–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏")

    if 'companies_df' not in st.session_state or 'reviews_df' not in st.session_state:
        st.session_state.companies_df, st.session_state.reviews_df = load_data()

    if st.session_state.companies_df is None or st.session_state.reviews_df is None:
        st.stop()

    first_name = st.text_input("–í–∞—à–µ –∏–º—è:")
    last_name = st.text_input("–í–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è:")

    if first_name and last_name:
        st.write(f"–ü—Ä–∏–≤–µ—Ç, {first_name} {last_name}! –†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –æ—Ü–µ–Ω–∫–∏ –∫–æ–º–ø–∞–Ω–∏–π.")

        company_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é", st.session_state.companies_df['company'].unique())

        avg_work_conditions, avg_culture, avg_management, avg_overall = update_average_rating(company_name)
        st.write(f"### –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è **{company_name}**")
        st.metric("–£—Å–ª–æ–≤–∏—è —Ç—Ä—É–¥–∞", avg_work_conditions)
        st.metric("–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –∫—É–ª—å—Ç—É—Ä–∞", avg_culture)
        st.metric("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", avg_management)
        st.metric("–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥", avg_overall)

        worked = st.radio("–í—ã —Ä–∞–±–æ—Ç–∞–ª–∏ –≤ —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏?", ('–ù–µ—Ç', '–î–∞'))

        if worked == '–ù–µ—Ç':
            question = st.text_area("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –∫–æ–º–ø–∞–Ω–∏–∏:")
            if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å"):
                new_question = {
                    'company': company_name,
                    'question_text': question,
                    'answer_text': '',
                    'user_name': first_name + ' ' + last_name,
                    'worked': '–ù–µ—Ç',
                    'review_text': '',
                    'work_conditions': '',
                    'culture': '',
                    'management': ''
                }
                save_review_row(new_question)
                st.success("–í–∞—à –≤–æ–ø—Ä–æ—Å –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        else:
            review = st.text_area("–í–∞—à –æ—Ç–∑—ã–≤ –æ –∫–æ–º–ø–∞–Ω–∏–∏:")
            work_conditions = st.slider("–û—Ü–µ–Ω–∏—Ç–µ —É—Å–ª–æ–≤–∏—è —Ç—Ä—É–¥–∞", 1, 5)
            culture = st.slider("–û—Ü–µ–Ω–∏—Ç–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –∫—É–ª—å—Ç—É—Ä—É", 1, 5)
            management = st.slider("–û—Ü–µ–Ω–∏—Ç–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", 1, 5)

            if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"):
                new_review = {
                    'company': company_name,
                    'question_text': '',
                    'answer_text': '',
                    'user_name': first_name + ' ' + last_name,
                    'worked': '–î–∞',
                    'review_text': review,
                    'work_conditions': work_conditions,
                    'culture': culture,
                    'management': management
                }
                save_review_row(new_review)
                st.success("–í–∞—à –æ—Ç–∑—ã–≤ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

        if st.checkbox("–í–æ–ø—Ä–æ—Å—ã –∂–¥—É—â–µ–π –æ—Ç–≤–µ—Ç–∞"):
            display_questions_and_answers(company_name, worked)

        if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∑—ã–≤—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"):
            display_employee_reviews(company_name)

        if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"):
            display_answered_questions(company_name)
    else:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")

